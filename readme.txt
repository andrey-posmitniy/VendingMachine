Задача реализована в 2х вариантах:
1. frontend-решение на knockoutjs (архив knockoutjs.7z)
В качестве алгоритма подбора сдачи используется жадный алгоритм. Описание алгоритмов ниже.
2. backend-решение на mvc (архив mvc.7z).
Реализовано 2 алгоритма подбора сдачи - жадный (такой же как во frontend-решении) и умный. Описание алгоритмов ниже.
Подключение того или иного алгоритма производится в классе IocConfig.cs через SimpleInjector.

При реализации исходил из предпосылки, что когда пользователь опускает монеты в машину - они сразу попадают в кошелек машины.
Т.е. нет никакого промежуточного буфера.

Алгоритмы подбора сдачи:
1. Жадный алгоритм.
Перебираем виды монет по убыванию номинала, если часть нужной суммы можно выдать этими монетами - записываем их в результирующий набор. И переходим к следующему номиналу.
Минус алгоритма: не всегда может отрабатывать при недостатке монет в кошельке машины.
Пример: нужно выдать 8 монет.
Варианты: 5+2+1, 2+2+2+2.
Но если в кошельке машины нет рублевых монет - жадный алгоритм не найдет решение.
2. Умный алгоритм.
Вычисляем все возможные комбинации монет, и затем выбираем лучшую комбинацию из тех, которые возможно выдать из текущего кошелька машины.
Лучшей комбинацией считаем комбинацию с наименьшим количеством монет, а если таких несколько - среди них выбираем комбинацию с наибольшим максимальным номиналом монеты.
Алгоритм лишен описанного выше недостатка.

Но для обоих алгоритмов возможна ситуация, когда сдачу выдать невозможно.
В таким случае машина сообщит об этом.
Пример:
1. В машине вообще нет монет.
2. Добавляем 4 монеты по 2р.
3. Покупаем товар за 7р. Остается 1р.
4. Этот рубль невозможно выдать.